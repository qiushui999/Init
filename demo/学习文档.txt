#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#define  pi  3.141592//标识符常量
extern int x;//声明add里面的变量x
const int a = 20;//常变量
enum sex
{
    male = 1,
    female,
    secret
};//枚举变量

int main()
{

    enum sex s = male;//只能赋值枚举常量里面的值


    printf("male=%d\n", male);//输出为0 1 2
    printf("s=%d\n", s);
    printf("female=%d\n", female);
    printf("secret=%d\n", secret);

    return 0;

}



//字符串

#include <stdio.h>
#include <string.h>
#define  pi  3.141592//标识符常量

int main()
{
    
    char a1[] = "hello";
    char a2[] = { 'a','b','c' ,'\0'};
    printf("a1=%s\n", a1);
    printf("a2=%s\n", a2);
  
   printf("a1 lengh=%d\n", strlen(a1));//字符串长度
   printf("a2 lengh=%d\n", strlen(a2));



    int line = 0;

    while (line < 30)
    {
        printf("写代码:%d\n",line);
        line++;
    }

    return 0; 

}
//字符串末尾有一个隐藏的\0
//函数初步
#include <stdio.h>
#include <string.h>
#define  pi  3.141592//标识符常量

int add(int x,int y)//加法函数
{
    int z = 0;
    scanf("%d%d",&x,&y);
    z = x + y;
    printf("%d\n", z);

    return z + 1;
}
int main()
{
    int a = 0;
    int b = 0;
    int c = 0;
    printf("请输入两个数字");
    c=add(a,b);//加法函数
    printf("%d",c);
    return 0; 
}


#include <stdio.h>
#include <string.h>
#define  pi  3.141592//标识符常量


int main()
{
    int a=2<<3;//int 为四个字节 每个字节八位 ，二进制往左移动三位
    int arr[] = { 0,1,25,5,215,5,51 };
    printf("%d\n",a);
    printf("%d",sizeof(arr)/sizeof(arr[0]));//计算数组元素个数


    max= a > b ? a :b;//三目运算符a>b成立，a;不成立  则b
    return 0; 
}


#include <stdio.h>
#include <string.h>
#define  pi  3.141592//标识符常量
#define  ADD(X,Y)  ((X)+(Y))//标识符常量

extern x;//声明外部变量
extern int add(int x, int y);//声明外部函数
typedef unsigned int u_int;//类型重定义,将unsigned int 定义为u_int

int main()
{
    int day = 0;
    scanf("%d", &day);

    switch (day)
    {
    case 1:
        printf("星期一\n"); break;
    case 2:
        printf("星期二\n"); break;
    case 3:
        printf("星期三\n"); break;
    case 4:
        printf("星期四\n"); break;
    case 5:
        printf("星期五\n"); break;
    case 6:
        printf("周末\n"); break;
    case 7:
        printf("周末\n"); break;
    default:
        printf("出错\n"); break;
    }

    
    return 0; 
}
//while 循环中，break用于永久的终止循环
//                          continue跳过continue后面的代码



//最大公约数

#include <stdio.h>
#include <string.h>
#include <windows.h>
#include <time.h>
#define  pi  3.141592//标识符常量
#define  ADD(X,Y)  ((X)+(Y))//标识符常量

extern x;//声明外部变量
extern int add(int x, int y);//声明外部函数
typedef unsigned int u_int;//类型重定义,将unsigned int 定义为u_int


void clean() {
	int temp = 0;
	while ((temp = getchar()) != '\n')
	{
		;//清除缓存函数
	}
}

int main()
{
	int a,b,i= 0;
	int max = 0;
	scanf("%d%d", &a, &b);
	if (a > b)
		max = b;
	else
		max = a;
	while (1)
	{
		if (a % max == 0 && b % max == 0)
		{
			printf("%d", max);
			break;
		}
		max--;

	}
    return 0;
}


//关机小程序
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void clean() {
	int temp = 0;
	while ((temp = getchar()) != '\n')
	{
		;//清除缓存函数
	}
}
int main()
{
	char input[] = { 0 };
	system("shutdown -s -t 120");
	while (1)
	{
		printf("请注意，你的电脑将在2分钟后关机，如果你输入：我是猪 就取消关机\n");
		printf("请输入:>");
		scanf("%s", input);
		if (strcmp(input, "我是猪") == 0)
		{
			system("shutdown -a");
			break;
		}
		else
		{
			printf("输错了，请重新输入\n");
		}
	}

    return 0;
}



//找数字
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define  pi  3.141592//标识符常量
#define  ADD(X,Y)  ((X)+(Y))//标识符常量

extern x;//声明外部变量
extern int add(int x, int y);//声明外部函数
typedef unsigned int u_int;//类型重定义,将unsigned int 定义为u_int

void clean() {
	int temp = 0;
	while ((temp = getchar()) != '\n')
	{
		;//清除缓存函数
	}
}
int key_search(int a[], int k, int s)
{
	int left = 0;
	int right = s - 1;
	while (left <= right) 
	{
		int mid = (left + right) / 2;
		if (a[mid] > k)
		{
			right = mid - 1;
		}
		else if (a[mid] < k)
		{
			left = mid + 1;
		}
		else
		{
			return mid;
			break;
		}	
	}
	if (left > right)
		return -1;

	
}
//逆序字符串
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9 };
	int key = 17;//要找的数
	int sz = sizeof(arr) / sizeof(arr[0]);//数组元素个数
	//数组传参，实际传递的不是数组本身，而是数组里首元素1地址
	int ret=key_search(arr,key,sz);//在数组中的位置
	if (ret==-1)
	{
		printf("找不到");	
	}
	else
	{
		printf("在数组中的位置为第%d位", ret);
	}
    return 0;
}

#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>

int my_strlen(char* str)
{
    int count = 0;
    while (*str != '\0')
    {
        count++;
        str++;
    }
    return count;
}

void  re_sting(char *str)
{
    int left = 0;
    int right = my_strlen(str) - 1;//不能使用strlen()，自己写一个
    while (left < right)
    {
        char temp = '\0';
        temp= str[left];//temp=*(str+left);
        str[left] = str[right];//*(str+left)=*(str+right);
        str[right] = temp;//*(str+right)=temp;
        left++;
        right--;
    }
}

int main()
{
    char arr[] = "abcdef";
    //要求：1.写一个函数使其逆序排列
    //2.不能使用strlen()库函数
    re_sting(arr);
    printf("%s", arr);  
    return 0;
}



#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>


//冒泡排序
void buddle_sort(int arr[], int sz)
{
    int i = 0;
    
    for (i = 0;i < sz - 1; i++)
    {
        int j = 0;
        int flag = 1;
        for (j = 0; j < sz - 1 - i; j++)
        {
            int temp = 0;
            
            if (arr[j] > arr[j + 1])
            {
                    temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                    flag = 0;
            }
          
        }
        if (flag = 1)
        {
            break;
        }

    }
}

int main()
{
    int arr[10] = { 1,2,4,3,6,5,7,8,9,10 };
    int sz = sizeof(arr) / sizeof(arr[0]);
    buddle_sort(arr,sz);
    for (int i = 0; i < 10; i++)
        printf("%d\n", arr[i]);
    printf("\n");

    return 0;
}

#include <stdio.h>
//判断二进制位数
int main()
{

	//0000 1111 右移  0000 0111
	//0000 0001       0000 0001
	//0000 0001       0000 0001

	int num= 15;
	int b = 1;
	int c = 1;
	int count = 0;//计数
	for (int i = 1; i<32; i++)
	{
		
		if ((num& b )== 1)
		{ 
			count++;
		}
		c = (num >> 1);
		num = c;
	}
	printf("%d", count);
	return 0;
}


//
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>

int main()
{
	
	int* p = malloc(10 * sizeof(int));//在堆区开辟40字节空间
	//int* p = (int*)malloc(40);
	for (int i = 0; i < 10; i++)
	{

		*(p + i) = i;
		printf("%d\n", p[i]);//*(p+i)
	}

	int* ptr=realloc(p, 20 * sizeof(int));//改成80字节
	if (ptr != NULL)
	{
		p = ptr;
	}
	free(p);
	p = NULL;//释放并置为空指针
	return 0;
}
